// <auto-generated />
using System;
using ChatDemoAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatDemoAPI.Migrations
{
    [DbContext(typeof(ChatDemoAPIContext))]
    [Migration("20231129112515_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatDemoAPI.Models.ChatHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatHistoryContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ChatRobotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("MessageTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReferencedDocumentDetailsIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChatHistory");
                });

            modelBuilder.Entity("ChatDemoAPI.Models.ChatRobot", b =>
                {
                    b.Property<Guid>("ChatRobotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChatRobotDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChatRobotName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ChatRobotId");

                    b.ToTable("ChatRobots");
                });

            modelBuilder.Entity("ChatDemoAPI.Models.ChatRobotDescription", b =>
                {
                    b.Property<Guid>("ChatRobotDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatRobotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.HasKey("ChatRobotDescriptionId");

                    b.HasIndex("ChatRobotId");

                    b.ToTable("ChatRobotsDescription");
                });

            modelBuilder.Entity("ChatDemoAPI.Models.Document", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatRobotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentId");

                    b.HasIndex("ChatRobotId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("ChatDemoAPI.Models.DocumentDetail", b =>
                {
                    b.Property<Guid>("DocumentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DocumentSequence")
                        .HasColumnType("int");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.HasKey("DocumentDetailId");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentDetail");
                });

            modelBuilder.Entity("ChatDemoAPI.Models.DocumentVectorData", b =>
                {
                    b.Property<long>("DocumentVectorDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DocumentVectorDataId"));

                    b.Property<Guid>("DocumentDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("VectorValue")
                        .HasColumnType("float")
                        .HasColumnName("vector_value");

                    b.Property<int>("VectorValueId")
                        .HasColumnType("int")
                        .HasColumnName("vector_value_id");

                    b.HasKey("DocumentVectorDataId");

                    b.HasIndex("DocumentDetailId");

                    b.ToTable("DocumentVectorData");
                });

            modelBuilder.Entity("ChatDemoAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChatDemoAPI.Models.ChatHistory", b =>
                {
                    b.HasOne("ChatDemoAPI.Models.User", "User")
                        .WithMany("ChatHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChatHistory_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatDemoAPI.Models.ChatRobotDescription", b =>
                {
                    b.HasOne("ChatDemoAPI.Models.ChatRobot", "ChatRobot")
                        .WithMany("ChatRobotDescriptions")
                        .HasForeignKey("ChatRobotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChatRobotDescription_ChatRobot");

                    b.Navigation("ChatRobot");
                });

            modelBuilder.Entity("ChatDemoAPI.Models.Document", b =>
                {
                    b.HasOne("ChatDemoAPI.Models.ChatRobot", "ChatRobot")
                        .WithMany("Document")
                        .HasForeignKey("ChatRobotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Document_ChatRobot");

                    b.Navigation("ChatRobot");
                });

            modelBuilder.Entity("ChatDemoAPI.Models.DocumentDetail", b =>
                {
                    b.HasOne("ChatDemoAPI.Models.Document", "Document")
                        .WithMany("DocumentDetail")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DocumentDetail_Document");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ChatDemoAPI.Models.DocumentVectorData", b =>
                {
                    b.HasOne("ChatDemoAPI.Models.DocumentDetail", "DocumentDetail")
                        .WithMany("DocumentVectorData")
                        .HasForeignKey("DocumentDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DocumentVectorData_DocumentDetail");

                    b.Navigation("DocumentDetail");
                });

            modelBuilder.Entity("ChatDemoAPI.Models.ChatRobot", b =>
                {
                    b.Navigation("ChatRobotDescriptions");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ChatDemoAPI.Models.Document", b =>
                {
                    b.Navigation("DocumentDetail");
                });

            modelBuilder.Entity("ChatDemoAPI.Models.DocumentDetail", b =>
                {
                    b.Navigation("DocumentVectorData");
                });

            modelBuilder.Entity("ChatDemoAPI.Models.User", b =>
                {
                    b.Navigation("ChatHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
